"""
University of Illinois/NCSA Open Source License>
Copyright (c) 2016 University of Illinois
All rights reserved.
Developed by: 		Eric Shaffer
                  Department of Computer Science
                  University of Illinois at Urbana Champaign
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal with the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
to permit persons to whom the Software is furnished to do so, subject to the following conditions:
Redistributions of source code must retain the above copyright notice, this list of conditions and the following
disclaimers.Redistributions in binary form must reproduce the above copyright notice, this list
of conditions and the following disclaimers in the documentation and/or other materials provided with the distribution.
Neither the names of <Name of Development Group, Name of Institution>, nor the names of its contributors may be
used to endorse or promote products derived from this Software without specific prior written permission.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS WITH THE SOFTWARE.
""" 

import numpy as np
import matplotlib.pyplot as pt
import random

from PIL import Image
from Sphere import Sphere
from Ray import Ray
from ViewPort import ViewPort
from Plane import Plane
from Triangle import Triangle
from operator import itemgetter
from PhongShading import PhongShading
from math import *
from ObjReader import objRead
from Octree import Octree, Onode

#create a viewport and image
v = ViewPort(np.array([0.0,0.0,2.0]), np.array([0.0,0.0,-10.0]), np.array([0.0,1.0,0.0]), 5.0, 10.0, 500)
im = Image.new("RGB",(v.w, v.h))
pix = im.load()


tree = Octree()
#define a point light 
light = PhongShading(np.array([0.0,10.0,2.0]), np.array([255,255,255]),.125000)

objarr = objRead("bunny.obj")
import time
count = 0
for item in objarr:
#    print item
#    print item.p1
#    print item.p2
#    print item.p3
    if tree.root.box.overlap(item.box):
        count += 1
    tree.insert(item)
#define a sphere
#time.sleep(5)
print count
point = np.array([0.0,-10.0,-13.0])
normal = np.array([0.0,-1.0,0.0])
p = Plane(point, normal, np.array([255,255,255]),0.002,0.75,0.05,150)
tree.insert(p)

#define a ray
ray = Ray(np.array([0.0,0.0,0.0]),np.array([0.0,0.0,-1.0]))

def normalize(v):
    def magnitude(v):
        return sqrt(sum(v[i]*v[i] for i in range(len(v))))
    vmag = magnitude(v)
    return np.array([ v[i]/vmag  for i in range(len(v)) ])

print v.center
print v.e
print v.c1
print v.c2
print v.c3
print v.c4
print np.dot(v.l, v.c3 - v.c1)
print np.dot(v.c2 - v.c1 , v.c3 -  v.c1)
print np.dot(v.c4 - v.c2 , v.c4 -  v.c3)

def normColor(temp):
    temp[0] = 255 if temp[0] > 255 else temp[0]
    temp[0] = 0 if temp[0] < 0 else temp[0]
    temp[1] = 255 if temp[1] > 255 else temp[1]
    temp[1] = 0 if temp[1] < 0 else temp[1]
    temp[2] = 255 if temp[2] > 255 else temp[2]
    temp[2] = 0 if temp[2] < 0 else temp[2]
    return temp

time.sleep(2)
count = tree.root.printt()
print count 
time.sleep(10)

#if multijittered is on which is very expensive
multijittered = 0
for col in range(v.w):
    for row in range(v.h):
            if multijittered == 0:
                print col, row
                ray.o = v.getPixelCenter(row, col)
#                print ray.o
                ray.d = ray.o - v.e
                ray.d = normalize(ray.d)
#                ray.d = np.array([0.0,0.0,-1.0])
                objarr = list(set(tree.get(ray)))
#                print objarr
                ls = []
                for item in objarr :
                    t = item.intersectRay(ray)
                    if t != None :
                        xp = ray.getPoint(t)
#                        ls.append((t, item.k, item.color, item.mat, item.getNormal(xp), xp, v.e))
                        ls.append((t, item, xp))
                try : 
                    #if len(ls) == 1:
                    #    pix[col, (v.h - 1) - row] = ls[0][1]
                    temp = (min(ls, key = lambda t : t[0]))
                    in_shade = False
                    xp = temp[2]
                    ray.o = xp
                    ray.d = light.point - xp
                    ray.d = normalize(ray.d)
                    objarr = list(set(tree.get(ray)))
                    for item in objarr :
                        if item == temp[1] : continue
                        t = item.intersectRay(ray)
                        if t != None and t > 0: 
                            in_shade = True
                            break
                    if in_shade :
                        temp = light.ambientRender(temp[1].ka, temp[1].color)
                        temp = normColor(temp)
                        pix[col, (v.h - 1) - row] = (int(temp[0]), int(temp[1]), int(temp[2]))
                    else :
                        temp = light.simpleRender(temp[1].ka, temp[1].kd, temp[1].ks, temp[1].color,temp[1].mat,temp[1].getNormal(temp[2]), temp[2], v.e)
                        temp = normColor(temp)
                        pix[col, (v.h - 1) - row] = (int(temp[0]), int(temp[1]), int(temp[2]))

#                    maxn =  np.amax(temp)
#                    minn = np.amin(temp)
#                    temp = temp + minn
##                    print maxn, temp
#                    temp = temp / maxn * 255
#                    print " after ",
#                    print maxn, temp
#                        print "aaaaaaaaa"
#                    print (int(temp[0]), int(temp[1]), int(temp[2]))
                    
                except : 
                    pix[col, (v.h - 1) - row] = (0,0,0)
                continue

#multijittered sampling for each pixel 16 samples and take box filter
#            tempArr = v.getMultiJitteredArray(row, col) 
#            colorTemp = (0,0,0)
#            for item in tempArr:
#                ray.o = item
#                ray.d = ray.o - v.e
#                ray.d = normalize(ray.d)
#                t = s.intersectRay(ray)
#                tp = p.intersectRay(ray)
#                tt = tri.intersectRay(ray)
#                ls = []
#                if t != None :
#                    xp = ray.getPoint(t)
#                    ls.append((t, phongDiffuse(xp, s.getNormal(xp), s.material)))
#                if tp != None :
#                    xp = ray.getPoint(tp)
#                    ls.append((tp, phongDiffuse(xp, p.getNormal(), p.c)))
##                    ls.append((tp, (0,255,0)))
#                if tt != None :
#                    xp = ray.getPoint(tt)
#                    ls.append((tt, phongDiffuse(xp, tri.getNormal(), tri.c)))
##                    print  phongDiffuse(xp, tri.getNormal(), tri.c)
##                    ls.append((tt, (0,0,255)))
#                try :
##                    print (min(ls, key = lambda t : t[0]))[1]
#                    colorTemp1 = (min(ls, key=lambda t : t[0]))[1]
#                    colorTemp = (colorTemp[0] + colorTemp1[0], colorTemp[1] + colorTemp1[1], colorTemp[2] + colorTemp1[2])
##                    if tt != None : print colorTemp1
#                except :
#                    print "fuck"
#                    colorTemp = (0,0,0)
#            colorTemp = (colorTemp[0] / 16.0, colorTemp[1] / 16.0, colorTemp[2] / 16.0)
#            if tt != None : print colorTemp
#
#
#            pix[col, (v.h -1) -row] = (int(colorTemp[0]), int(colorTemp[1]), int(colorTemp[2]))
#            ray.o = v.getPixelCenter(col,row)
#            ray.d = ray.o - v.e
#            ray.d = normalize(ray.d)

#            print ray.d
#            print ray.o



#            if tt != None and  
#            elif (t != None and (tp < 0 or t < tp)):
#                xp = ray.getPoint(t) 
#                pix[col,(v.h-1)-row] = phongDiffuse(xp,s.getNormal(xp),s.material)
#            elif (tp != None and tp > 0 ):
#                pix[col,(v.h-1)-row] = getPlaneColor(p.c)

# Show the image in a window
                
im.show()
im.save("img2.png")
